'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol ? "symbol" : typeof obj; };

var querystring = require('querystring');

// ====================================
// Custom Badges

/**
Generate a HTML badge
@private
@method badge
@param {String} config.image The URL to the image
@param {String} [config.alt] The alt attribute for the image
@param {String} [config.url] The URL for the link
@param {String} [config.title] The title attribute for the link
@return {String} the result badge
*/
function badge(_ref) {
	var image = _ref.image;
	var alt = _ref.alt;
	var url = _ref.url;
	var title = _ref.title;

	// Check
	if (!image) throw new Error('image is missing');

	// Create
	var result = alt ? '<img src="' + image + '" alt="' + alt + '" />' : '<img src="' + image + '" />';
	if (url) {
		result = (title ? '<a href="' + url + '" title="' + title + '">' : '<a href="' + url + '">') + result + '</a>';
	}
	return result;
}
badge.badgeCategory = 'custom';

/**
Shields Custom Badge
@method shields
@param {String} config.left The text for the left side of the badge
@param {String} config.right The text for the right side of the badge
@param {String} [config.color='yellow] The color for the badge
@param {String} [config.alt] The alt attribute for the image
@param {String} [config.url] The URL for the link
@param {String} [config.title] The title attribute for the link
@return {String} the result badge
*/
function shields(_ref2) {
	var left = _ref2.left;
	var right = _ref2.right;
	var _ref2$color = _ref2.color;
	var color = _ref2$color === undefined ? 'yellow' : _ref2$color;
	var alt = _ref2.alt;
	var url = _ref2.url;
	var title = _ref2.title;

	// Check
	if (!left) throw new Error('left is missing');
	if (!right) throw new Error('right is missing');

	// Create
	var image = 'https://img.shields.io/badge/' + left + '-' + right + '-' + color + '.svg';
	return badge({ image: image, alt: alt, url: url, title: title });
}
shields.badgeCategory = 'custom';

// ====================================
// Development Badges

/**
NPM Version Badge
@method npmversion
@param {String} config.npmPackageName The repository slug (username/reponame)
@return {String} the result badge
*/
function npmversion(_ref3) {
	var npmPackageName = _ref3.npmPackageName;

	// Check
	if (!npmPackageName) throw new Error('npmPackageName is missing');

	// Create
	var image = 'https://img.shields.io/npm/v/' + npmPackageName + '.svg';
	var url = 'https://npmjs.org/package/' + npmPackageName;
	var alt = 'NPM version';
	var title = 'View this project on NPM';
	return badge({ image: image, alt: alt, url: url, title: title });
}
npmversion.badgeCategory = 'development';

/**
NPM Downloads Badge
@method npmdownloads
@param {String} config.npmPackageName The repository slug (username/reponame)
@return {String} the result badge
*/
function npmdownloads(_ref4) {
	var npmPackageName = _ref4.npmPackageName;

	// Check
	if (!npmPackageName) throw new Error('npmPackageName is missing');

	var image = 'https://img.shields.io/npm/dm/' + npmPackageName + '.svg';
	var url = 'https://npmjs.org/package/' + npmPackageName;
	var alt = 'NPM downloads';
	var title = 'View this project on NPM';
	return badge({ image: image, alt: alt, url: url, title: title });
}
npmdownloads.badgeCategory = 'development';

/**
David DM Dependencies Badge
@method daviddm
@param {String} config.githubSlug The github slug that the project lives at (e.g. bevry/badges)
@return {String} the result badge
*/
function daviddm(_ref5) {
	var githubSlug = _ref5.githubSlug;

	// Check
	if (!githubSlug) throw new Error('githubSlug is missing');

	// Create
	var image = 'https://img.shields.io/david/' + githubSlug + '.svg';
	var url = 'https://david-dm.org/' + githubSlug;
	var alt = 'Dependency Status';
	var title = "View the status of this project's dependencies on DavidDM";
	return badge({ image: image, alt: alt, url: url, title: title });
}
daviddm.badgeCategory = 'development';

/**
David DM Dev Dependencies Badge
@method daviddmdev
@param {String} config.githubSlug The github slug that the project lives at (e.g. bevry/badges)
@return {String} the result badge
*/
function daviddmdev(_ref6) {
	var githubSlug = _ref6.githubSlug;

	// Check
	if (!githubSlug) throw new Error('githubSlug is missing');

	// Create
	var image = 'https://img.shields.io/david/dev/' + githubSlug + '.svg';
	var url = 'https://david-dm.org/' + githubSlug + '#info=devDependencies';
	var alt = 'Dev Dependency Status';
	var title = "View the status of this project's development dependencies on DavidDM";
	return badge({ image: image, alt: alt, url: url, title: title });
}
daviddmdev.badgeCategory = 'development';

/**
Nodei.co Badge
@method nodeico
@param {String} config.npmPackageName
@param {String|Object} [config.nodeicoQueryString] See https://nodei.co for options
	defined as either a string param1=&param2=
	or an object {param1: '', param2: ''} that will be serialized to param1=&param2= etc.
@return {String} the result badge
*/
function nodeico(_ref7) {
	var npmPackageName = _ref7.npmPackageName;
	var nodeicoQueryString = _ref7.nodeicoQueryString;

	// Prepare
	if (!npmPackageName) throw new Error('npmPackageName is missing');
	if (nodeicoQueryString && typeof nodeicoQueryString !== 'string' && (typeof nodeicoQueryString === 'undefined' ? 'undefined' : _typeof(nodeicoQueryString)) !== 'object') {
		throw new Error('nodeicoQueryString must be a string or an object');
	}

	// Return
	var url = 'https://www.npmjs.com/package/' + npmPackageName;
	var alt = 'Nodei.co badge';
	var title = 'Nodei.co badge';
	var image = 'https://nodei.co/npm/' + npmPackageName + '.png';
	var query = (typeof nodeicoQueryString === 'undefined' ? 'undefined' : _typeof(nodeicoQueryString)) === 'object' ? querystring.stringify(nodeicoQueryString) : nodeicoQueryString;
	if (query) image += '?' + query;
	return badge({ image: image, alt: alt, url: url, title: title });
}
nodeico.badgeCategory = 'development';

// ====================================
// Testing Badges

/**
Sauce Labs Browser Matrix Badge
@method saucelabsbm
@param {String} config.githubSlug The github slug that the project lives at (e.g. bevry/badges)
@return {String} the result badge
*/
function saucelabsbm(_ref8) {
	var saucelabsUsername = _ref8.saucelabsUsername;
	var saucelabsAuthToken = _ref8.saucelabsAuthToken;

	// Check
	if (!saucelabsUsername) throw new Error('saucelabsUsername is missing');
	saucelabsAuthToken = saucelabsAuthToken || process.env.SAUCELABS_AUTH_TOKEN;
	if (!saucelabsAuthToken) throw new Error('saucelabsAuthToken is missing');

	// Create
	var image = 'https://saucelabs.com/browser-matrix/' + saucelabsUsername + '.svg?auth=' + escape(saucelabsAuthToken);
	var url = 'https://saucelabs.com/u/' + saucelabsUsername;
	var alt = 'Sauce Labs Browser Matrix';
	var title = "Check this project's browser tests on Sauce Labs";
	return badge({ image: image, alt: alt, url: url, title: title });
}
saucelabsbm.badgeCategory = 'testing';
saucelabsbm.badgeInline = false;

/**
Sauce Labs Badge
@method saucelabsbm
@param {String} config.saucelabsUsername The saucelabs username
@param {String} config.saucelabsAuthToken The saucelabs authorisation token
@return {String} the result badge
*/
function saucelabs(_ref9) {
	var saucelabsUsername = _ref9.saucelabsUsername;
	var saucelabsAuthToken = _ref9.saucelabsAuthToken;

	// Check
	if (!saucelabsUsername) throw new Error('saucelabsUsername is missing');
	saucelabsAuthToken = saucelabsAuthToken || process.env.SAUCELABS_AUTH_TOKEN;
	if (!saucelabsAuthToken) throw new Error('saucelabsAuthToken is missing');

	// Create
	var image = 'https://saucelabs.com/browser-matrix/' + saucelabsUsername + '.svg?auth=' + escape(saucelabsAuthToken);
	var url = 'https://saucelabs.com/u/' + saucelabsUsername;
	var alt = 'Sauce Labs Browser Matrix';
	var title = "Check this project's browser tests on Sauce Labs";
	return badge({ image: image, alt: alt, url: url, title: title });
}
saucelabs.badgeCategory = 'testing';

/**
Travis CI Badge
@method travisci
@param {String} config.githubSlug The github slug that the project lives at (e.g. bevry/badges)
@return {String} the result badge
*/
function travisci(_ref10) {
	var githubSlug = _ref10.githubSlug;

	// Check
	if (!githubSlug) throw new Error('githubSlug is missing');

	// Create
	var image = 'https://img.shields.io/travis/' + githubSlug + '/master.svg';
	var url = 'http://travis-ci.org/' + githubSlug;
	var alt = 'Travis CI Build Status';
	var title = "Check this project's build status on TravisCI";
	return badge({ image: image, alt: alt, url: url, title: title });
}
travisci.badgeCategory = 'testing';

/**
Codeship Badge
@method codeship
@param {String} config.codeshipProjectUUID The UUID for a specific project, which is available on the General tab in your project settings
@param {String} config.codeshipProjectID The ID for a specific project, which is available via the URL for the codeship project page
@return {String} the result badge
*/
function codeship(_ref11) {
	var codeshipProjectUUID = _ref11.codeshipProjectUUID;
	var codeshipProjectID = _ref11.codeshipProjectID;

	// Check
	if (!codeshipProjectUUID) throw new Error('codeshipProjectUUID is missing');
	if (!codeshipProjectID) throw new Error('codeshipProjectID is missing');

	// Create
	var image = 'https://img.shields.io/codeship/' + codeshipProjectUUID + '/master.svg';
	var url = 'https://www.codeship.io/projects/' + codeshipProjectID;
	var alt = 'Codeship Status';
	var title = "Check this project's status on Codeship";
	return badge({ image: image, alt: alt, url: url, title: title });
}
codeship.badgeCategory = 'testing';

/**
Coveralls Badge
@method coveralls
@param {String} config.githubSlug The github slug that the project lives at (e.g. bevry/badges)
@return {String} the result badge
*/
function coveralls(_ref12) {
	var githubSlug = _ref12.githubSlug;

	// Check
	if (!githubSlug) throw new Error('githubSlug is missing');

	// Create
	var image = 'https://img.shields.io/coveralls/' + githubSlug + '.svg';
	var url = 'https://coveralls.io/r/' + githubSlug;
	var alt = 'Coverage Status';
	var title = "View this project's coverage on Coveralls";
	return badge({ image: image, alt: alt, url: url, title: title });
}
coveralls.badgeCategory = 'testing';

/**
Waffle Badge
@method waffle
@param {String} config.githubSlug The github slug that the project lives at (e.g. bevry/badges)
@return {String} the result badge
*/
function waffle(_ref13) {
	var githubSlug = _ref13.githubSlug;

	// Check
	if (!githubSlug) throw new Error('githubSlug is missing');

	// Create
	var label = 'ready';
	var image = 'https://badge.waffle.io/' + githubSlug + '.png?label=' + escape(label);
	var url = 'http://waffle.io/' + githubSlug;
	var alt = 'Stories in Ready';
	var title = "View this project's stories on Waffle.io";
	return badge({ image: image, alt: alt, url: url, title: title });
}
waffle.badgeCategory = 'testing';

// ====================================
// Funding Badges

/**
60devs Tips Badge
@method patreon
@param {String} config.sixtydevsUsername The 60devs username to donate to
@param {String} config.sixtydevstipsURL The url to the 60devs donate page
@return {String} the result badge
*/
function sixtydevstips(_ref14) {
	var sixtydevstipsID = _ref14.sixtydevstipsID;
	var sixtydevstipsURL = _ref14.sixtydevstipsURL;

	// Check
	if (!sixtydevstipsURL) {
		if (!sixtydevstipsID) throw new Error('sixtydevstipsID is missing');
		sixtydevstipsURL = 'https://tips.60devs.com/tip/' + sixtydevstipsID;
	}

	// Create
	var image = 'https://img.shields.io/badge/60devs-donate-yellow.svg';
	var url = sixtydevstipsURL;
	var alt = '60devs tips donate button';
	var title = 'Donate to this project using 60devs tips';
	return badge({ image: image, alt: alt, url: url, title: title });
}
sixtydevstips.badgeCategory = 'funding';

/**
Patreon Badge
@method patreon
@param {String} config.patreonUsername The patreon username to donate to
@param {String} config.patreonURL The url to the patreon donate page
@return {String} the result badge
*/
function patreon(_ref15) {
	var patreonUsername = _ref15.patreonUsername;
	var patreonURL = _ref15.patreonURL;

	// Check
	if (!patreonURL) {
		if (!patreonUsername) throw new Error('patreonUsername is missing');
		patreonURL = 'http://patreon.com/' + patreonUsername;
	}

	// Create
	var image = 'https://img.shields.io/badge/patreon-donate-yellow.svg';
	var url = patreonURL;
	var alt = 'Patreon donate button';
	var title = 'Donate to this project using Patreon';
	return badge({ image: image, alt: alt, url: url, title: title });
}
patreon.badgeCategory = 'funding';

/**
Gratipay Badge
@method gratipay
@param {String} config.gratipayUsername The gratipay username to donate to
@param {String} config.gratipayURL The url to the gratipay donate page
@return {String} the result badge
*/
function gratipay(_ref16) {
	var gratipayUsername = _ref16.gratipayUsername;
	var gratipayURL = _ref16.gratipayURL;

	// Check
	if (!gratipayURL) {
		if (!gratipayUsername) throw new Error('gratipayUsername is missing');
		gratipayURL = 'https://www.gratipay.com/' + gratipayUsername;
	}

	// Create
	var image = 'https://img.shields.io/badge/gratipay-donate-yellow.svg';
	var url = gratipayURL;
	var alt = 'Gratipay donate button';
	var title = 'Donate weekly to this project using Gratipay';
	return badge({ image: image, alt: alt, url: url, title: title });
}
gratipay.badgeCategory = 'funding';

/**
Flattr Badge
@method flattr
@param {String} config.flattrCode The flattr code to donate to (e.g. 344188/balupton-on-Flattr)
@param {String} config.flattrUsername The flattr username to donate to (e.g. balupton)
@param {String} config.flattrURL The url to the flattr donate page
@return {String} the result badge
*/
function flattr(_ref17) {
	var flattrCode = _ref17.flattrCode;
	var flattrUsername = _ref17.flattrUsername;
	var flattrURL = _ref17.flattrURL;

	// Check
	if (!flattrURL) {
		if (flattrUsername) {
			flattrURL = 'https://flattr.com/profile/' + flattrUsername;
		} else if (flattrCode) {
			flattrURL = 'https://flattr.com/thing/' + flattrCode;
		} else {
			throw new Error('flattrUsername/flattrCode is missing');
		}
	}

	// Create
	var image = 'https://img.shields.io/badge/flattr-donate-yellow.svg';
	var url = flattrURL;
	var alt = 'Flattr donate button';
	var title = 'Donate to this project using Flattr';
	return badge({ image: image, alt: alt, url: url, title: title });
}
flattr.badgeCategory = 'funding';

/**
Paypal Badge
@method paypal
@param {String} config.paypalURL The url to the paypal donate page
@param {String} config.paypalButtonID The paypal button id
@param {String} config.paypalUsername The paypal.me username
@return {String} the result badge
*/
function paypal(_ref18) {
	var paypalURL = _ref18.paypalURL;
	var paypalButtonID = _ref18.paypalButtonID;
	var paypalUsername = _ref18.paypalUsername;

	// Check
	if (!paypalURL) {
		if (paypalButtonID) {
			paypalURL = 'https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;hosted_button_id=' + escape(paypalButtonID);
		} else if (paypalUsername) {
			paypalURL = 'https://paypal.me/' + paypalUsername;
		} else {
			throw new Error('paypalURL, paypalButtonID, or paypalUsername is missing, at least one must exist');
		}
	}

	// Create
	var image = 'https://img.shields.io/badge/paypal-donate-yellow.svg';
	var url = paypalURL;
	var alt = 'PayPal donate button';
	var title = 'Donate to this project using Paypal';
	return badge({ image: image, alt: alt, url: url, title: title });
}
paypal.badgeCategory = 'funding';

/**
Bitcoin Badge
@method bitcoin
@param {String} config.bitcoinURL The url to the bitcoin donation page
@return {String} the result badge
*/
function bitcoin(_ref19) {
	var bitcoinURL = _ref19.bitcoinURL;

	// Check
	if (!bitcoinURL) throw new Error('bitcoinURL is missing');

	// Create
	var image = 'https://img.shields.io/badge/bitcoin-donate-yellow.svg';
	var url = bitcoinURL;
	var alt = 'Bitcoin donate button';
	var title = 'Donate once-off to this project using Bitcoin';
	return badge({ image: image, alt: alt, url: url, title: title });
}
bitcoin.badgeCategory = 'funding';

/**
Wishlist Badge
@method wishlist
@param {String} config.wishlistURL The url to the wishlist page
@return {String} the result badge
*/
function wishlist(_ref20) {
	var wishlistURL = _ref20.wishlistURL;

	// Check
	if (!wishlistURL) throw new Error('wishlistURL is missing');

	// Create
	var image = 'https://img.shields.io/badge/wishlist-donate-yellow.svg';
	var url = wishlistURL;
	var alt = 'Wishlist browse button';
	var title = 'Buy an item on our wishlist for us';
	return badge({ image: image, alt: alt, url: url, title: title });
}
wishlist.badgeCategory = 'funding';

// ====================================
// Social Badges

/**
Slackin Script Badge
@method slackinscript
@param {String} config.slackinURL The slackin url (e.g. https://slack.bevry.me)
@return {String} the result badge
*/
function slackinscript(_ref21) {
	var slackinURL = _ref21.slackinURL;

	// Check
	if (!slackinURL) throw new Error('slackinURL is missing');

	// Create
	return '<script async defer src="' + slackinURL + '/slackin.js"></script>';
}
slackinscript.badgeCategory = 'social';
slackinscript.badgeScript = true;

/**
Slackin Badge
@method slackin
@param {String} config.slackinURL The slackin url (e.g. https://slack.bevry.me)
@return {String} the result badge
*/
function slackin(_ref22) {
	var slackinURL = _ref22.slackinURL;

	// Check
	if (!slackinURL) throw new Error('slackinURL is missing');

	// Create
	var image = slackinURL + '/badge.svg';
	var url = slackinURL;
	var alt = 'Slack community badge';
	var title = 'Join this project\'s slack community';
	return badge({ image: image, alt: alt, url: url, title: title });
}
slackin.badgeCategory = 'social';

/**
Google Analytics Beacon Badge
https://github.com/igrigorik/ga-beacon
@method gabeacon
@param {String} config.gaTrackingID The google analytics tracing id (e.g. UA-XXXXX-XX)
@param {String} config.githubSlug The github slug that the project lives at (e.g. bevry/badges)
@return {String} the result badge
*/
function gabeacon(_ref23) {
	var gaTrackingID = _ref23.gaTrackingID;
	var githubSlug = _ref23.githubSlug;

	// Check
	if (!gaTrackingID) throw new Error('gaTrackingID is missing');
	if (!githubSlug) throw new Error('githubSlug is missing');

	// Create
	var image = 'https://ga-beacon.appspot.com/' + gaTrackingID + '/' + githubSlug;
	var url = 'https://github.com/igrigorik/ga-beacon';
	var alt = 'Google Analytics beacon image';
	var title = 'Get Google Analytics for your project';
	return badge({ image: image, alt: alt, url: url, title: title });
}
gabeacon.badgeCategory = 'social';

/**
Google Plus One Button
@method googleplusone
@param {String} config.homepage The page url that the badge will be for
@return {String} the result badge
*/
function googleplusone(_ref24) {
	var homepage = _ref24.homepage;

	// Check
	if (!homepage) throw new Error('homepage is missing');

	// Create
	return '<span class="g-plusone" data-size="medium" data-href="' + homepage + '"></span><script>(function() {var po = document.createElement(\'script\'); po.type = \'text/javascript\'; po.async = true; po.src = \'//apis.google.com/js/plusone.js\'; var s = document.getElementsByTagName(\'script\')[0]; s.parentNode.insertBefore(po, s);})();</script>';
}
googleplusone.badgeCategory = 'social';
googleplusone.badgeScript = true;

/**
Reddit Submit Button
@method redditsubmit
@param {String} config.homepage The page url that the badge will be for
@return {String} the result badge
*/
function redditsubmit(_ref25) {
	var homepage = _ref25.homepage;

	// Check
	if (!homepage) throw new Error('homepage is missing');

	// Create
	return '<script>reddit_url="' + homepage + '"</script><script src="https://en.reddit.com/static/button/button1.js"></script>';
}
redditsubmit.badgeCategory = 'social';
redditsubmit.badgeScript = true;

/**
Hacker News Submit Button
@method hackernewssubmit
@param {String} config.homepage The page url that the badge will be for
@return {String} the result badge
*/
function hackernewssubmit(_ref26) {
	var homepage = _ref26.homepage;

	// Check
	if (!homepage) throw new Error('homepage is missing');

	// Create
	return '<a href="https://news.ycombinator.com/submit" class="hn-button" data-url="' + homepage + '" data-count="horizontal">Vote on Hacker News</a><script>var HN=[];HN.factory=function(e){return function(){HN.push([e].concat(Array.prototype.slice.call(arguments,0)))};},HN.on=HN.factory("on"),HN.once=HN.factory("once"),HN.off=HN.factory("off"),HN.emit=HN.factory("emit"),HN.load=function(){var e="hn-button.js";if(document.getElementById(e))return;var t=document.createElement("script");t.id=e,t.src="https://hn-button.herokuapp.com/hn-button.js";var n=document.getElementsByTagName("script")[0];n.parentNode.insertBefore(t,n)},HN.load();</script>';
}
hackernewssubmit.badgeCategory = 'social';
hackernewssubmit.badgeScript = true;

/**
Facebook Like Button
@method facebooklike
@param {String} config.homepage The page url that the badge will be for
@param {String} config.facebookApplicationID The facebook application id that the badge is for
@return {String} the result badge
*/
function facebooklike(_ref27) {
	var homepage = _ref27.homepage;
	var facebookApplicationID = _ref27.facebookApplicationID;

	// Prepare
	if (!homepage) throw new Error('homepage is missing');
	facebookApplicationID = facebookApplicationID || process.env.FACEBOOK_APPLICATION_ID;
	if (!facebookApplicationID) throw new Error('facebookApplicationID is missing');

	// Return
	return '<iframe src="https://www.facebook.com/plugins/like.php?href=' + escape(homepage) + '&amp;send=false&amp;layout=button_count&amp;width=450&amp;show_faces=false&amp;font&amp;colorscheme=light&amp;action=like&amp;height=21&amp;appId=' + escape(facebookApplicationID) + '" scrolling="no" frameborder="0" style="border:none; overflow:hidden; width:450px; height:21px;" allowTransparency="true"></iframe>';
}
facebooklike.badgeCategory = 'social';
facebooklike.badgeScript = true;

/**
Facebook Follow Button
@method facebookfollow
@param {String} config.facebookUsername The facebook username to follow
@param {String} config.facebookApplicationID The facebook application id that the badge is for
@return {String} the result badge
*/
function facebookfollow(_ref28) {
	var facebookUsername = _ref28.facebookUsername;
	var facebookApplicationID = _ref28.facebookApplicationID;

	// Prepare
	if (!facebookUsername) throw new Error('facebookUsername is missing');
	facebookApplicationID = facebookApplicationID || process.env.FACEBOOK_APPLICATION_ID;
	if (!facebookApplicationID) throw new Error('facebookApplicationID is missing');

	// Return
	return '<iframe src="https://www.facebook.com/plugins/follow.php?href=https%3A%2F%2Fwww.facebook.com%2F' + escape(facebookUsername) + '&amp;layout=button_count&amp;show_faces=false&amp;colorscheme=light&amp;font&amp;width=450&amp;appId=' + escape(facebookApplicationID) + '" scrolling="no" frameborder="0" style="border:none; overflow:hidden; width:450px; height: 20px;" allowTransparency="true"></iframe>';
}
facebookfollow.badgeCategory = 'social';
facebookfollow.badgeScript = true;

/**
Twitter Tweet Button
@method twittertweet
@param {String} config.twitterUsername The twitter username to tweet at
@return {String} the result badge
*/
function twittertweet(_ref29) {
	var twitterUsername = _ref29.twitterUsername;

	// Prepare
	if (!twitterUsername) throw new Error('twitterUsername is missing');

	// Return
	return '<a href="https://twitter.com/share" class="twitter-share-button" data-via="' + twitterUsername + '" data-related="' + twitterUsername + '">Tweet</a><script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="https://platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script>';
}
twittertweet.badgeCategory = 'social';
twittertweet.badgeScript = true;

/**
Twitter Follow Button
@method twitterfollow
@param {String} config.twitterUsername The twitter username to follow
@return {String} the result badge
*/
function twitterfollow(_ref30) {
	var twitterUsername = _ref30.twitterUsername;

	// Prepare
	if (!twitterUsername) throw new Error('twitterUsername is missing');

	// Return
	return '<a href="https://twitter.com/' + escape(twitterUsername) + '" class="twitter-follow-button" data-show-count="false">Follow @' + twitterUsername + '</a><script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0];if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src="https://platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script>';
}
twitterfollow.badgeCategory = 'social';
twitterfollow.badgeScript = true;

/**
Github Follow Button
@method githubfollow
@param {String} config.githubUsername The github user to follow
@return {String} the result badge
*/
function githubfollow(_ref31) {
	var githubUsername = _ref31.githubUsername;

	// Prepare
	if (!githubUsername) throw new Error('githubUsername is missing');

	// Return
	return '<iframe src="https://ghbtns.com/github-btn.html?user=' + escape(githubUsername) + '&amp;type=follow&amp;count=true" allowtransparency="true" frameborder="0" scrolling="0" width="165" height="20"></iframe>';
}
githubfollow.badgeCategory = 'social';
githubfollow.badgeScript = true;

/**
GitHub Star Button
@method githubstar
@param {String} config.githubSlug The github slug that the project lives at (e.g. bevry/badges)
@return {String} the result badge
*/
function githubstar(_ref32) {
	var githubSlug = _ref32.githubSlug;

	// Prepare
	if (!githubSlug) throw new Error('githubSlug is missing');
	var split = githubSlug.split('/');
	var githubUsername = split[0];
	var githubRepository = split[1];
	if (!githubUsername || !githubRepository) throw new Error('githubSlug is invalid');

	// Return
	return '<iframe src="https://ghbtns.com/github-btn.html?user=' + escape(githubUsername) + '&amp;repo=' + escape(githubRepository) + '&amp;type=watch&amp;count=true" allowtransparency="true" frameborder="0" scrolling="0" width="110" height="20"></iframe>';
}
githubstar.badgeCategory = 'social';
githubstar.badgeScript = true;

/**
Quora Follow Button
@method quorafollow
@param {String} config.quoraUsername The quora user to follow
@param {String} [config.quoraRealname] The quora user's name
@param {String} [config.quoraCode] Some code
@return {String} the result badge
*/
function quorafollow(_ref33) {
	var quoraUsername = _ref33.quoraUsername;
	var quoraRealname = _ref33.quoraRealname;
	var quoraCode = _ref33.quoraCode;

	// Prepare
	if (!quoraUsername) throw new Error('quoraUsername is missing');
	quoraRealname = quoraRealname || quoraUsername.replace(/-/g, ' ');
	quoraCode = quoraCode || '7N31XJs';

	// Return
	return ('\n\t\t<span data-name="' + quoraUsername + '">\n\t\t\tFollow <a href="http://www.quora.com/' + quoraUsername + '">' + quoraRealname + '</a> on <a href="http://www.quora.com">Quora</a>\n\t\t\t<script src="https://www.quora.com/widgets/follow?embed_code=' + escape(quoraCode) + '"></script>\n\t\t</span>').replace(/\n\s*/g, '');
}
quorafollow.badgeCategory = 'social';
quorafollow.badgeScript = true;

// Export
module.exports = {
	badge: badge,
	shields: shields,
	npmversion: npmversion,
	npmdownloads: npmdownloads,
	daviddm: daviddm,
	daviddmdev: daviddmdev,
	saucelabsbm: saucelabsbm,
	saucelabs: saucelabs,
	travisci: travisci,
	codeship: codeship,
	coveralls: coveralls,
	waffle: waffle,
	sixtydevstips: sixtydevstips,
	patreon: patreon,
	gratipay: gratipay,
	flattr: flattr,
	paypal: paypal,
	bitcoin: bitcoin,
	wishlist: wishlist,
	slackinscript: slackinscript,
	slackin: slackin,
	gabeacon: gabeacon,
	googleplusone: googleplusone,
	redditsubmit: redditsubmit,
	hackernewssubmit: hackernewssubmit,
	facebooklike: facebooklike,
	facebookfollow: facebookfollow,
	twittertweet: twittertweet,
	twitterfollow: twitterfollow,
	githubfollow: githubfollow,
	githubstar: githubstar,
	quorafollow: quorafollow,
	nodeico: nodeico
};